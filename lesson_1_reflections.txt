How did viewing a diff between two versions of a file help you see the bug that
was introduced?

It showed me only the places where the two files differed, making it easy to find the difference.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

Don't know about efficiency in particular, but it would make me comfortable trying things and
making mistakes since I could just return to an old version.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

The pros are that you can easily track the changes you've made and see why you made each change.
The cons are that you could miss an important change by forgetting to save it.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

Git was designed to deal with software projects in which the files are linked in important ways.


How can you use the commands git log and git diff to view the history of files?

You can use git log to see a list of all commits, git log --stat to see the number of changes
each commit involved, and git diff to see the specific differences between versions.

How might using version control make you more confident to make changes that
could break something?

Using version control, you can always use "git checkout" to revert to an old version before a bug
was introduced.

Now that you have your workspace set up, what do you want to try using Git for?

I want to use Git to manage my workflow on programming projects.